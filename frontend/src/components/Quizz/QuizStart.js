import React, { useState, useEffect } from "react";
import styled, { keyframes } from "styled-components";

const QuizWrapper = styled.div`
  background-image: url('/image/bg-paper.jpg');
  background-size: cover;
  background-position: center;
  min-height: 100vh;
  width: 100vw;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  padding: 40px 20px;
  text-align: center;
`;

const QuestionRow = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  flex-wrap: wrap;
  width: 100%;
  max-width: 1400px;
  gap: 40px;
  margin-bottom: 30px;
`;

const QuestionImage = styled.img`
  width: 500px;
  height: 350px;
  border-radius: 20px;
  object-fit: cover;
  flex-shrink: 0;
`;

const QuestionBlock = styled.div`
  flex: 1;
  min-width: 300px;
  max-width: 600px;
  text-align: left;
`;

const QuestionText = styled.h2`
  font-size: 22px;
  margin-bottom: 20px;
  color: #000;
`;

const OptionList = styled.div`
  display: flex;
  flex-direction: column;
  gap: 14px;
`;

const Option = styled.div`
  display: flex;
  align-items: center;
  background: ${({ selected, correct, isAnswer }) => {
    if (isAnswer) return '#ccffcc';
    if (correct === false && selected) return '#ffcccc';
    return selected ? '#ffeeba' : 'white';
  }};
  border: 2px solid #a40000;
  border-radius: 20px;
  padding: 12px 20px;
  cursor: ${({ disabled }) => (disabled ? 'default' : 'pointer')};
  font-weight: bold;
  color: #333;
  width: 100%;
  max-width: 400px;
  min-width: 300px;
  transition: all 0.3s ease;
`;

const ProgressBarWrapper = styled.div`
  width: 500px;
  height: 12px;
  background: black;
  border-radius: 12px;
  overflow: hidden;
  margin-top: 20px;
  display: flex;
  align-items: center;
  position: relative;
`;

const fillAnimation = keyframes`
  from { width: 100%; }
  to { width: 0%; }
`;

const ProgressFill = styled.div`
  background: repeating-linear-gradient(
    45deg,
    #ff9999,
    #ff9999 10px,
    #ccffcc 10px,
    #ccffcc 20px,
    #ffff99 20px,
    #ffff99 30px
  );
  height: 100%;
  animation: ${fillAnimation} 10s linear forwards;
`;

const NextButton = styled.button`
  position: fixed;
  bottom: 30px;
  right: 30px;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 10px;
  padding: 12px 24px;
  font-size: 16px;
  font-weight: bold;
  cursor: pointer;
  box-shadow: 0 4px 10px rgba(0,0,0,0.3);
  z-index: 1000;

  &:hover {
    background-color: #45a049;
  }
`;

const questions = [
    {
      image: "/image/q1.jpg",
      question: "Ai l√† ng∆∞·ªùi ƒë√£ l√£nh ƒë·∫°o cu·ªôc kh·ªüi nghƒ©a Lam S∆°n ch·ªëng l·∫°i qu√¢n Minh v√† s√°ng l·∫≠p ra tri·ªÅu ƒë·∫°i nh√† L√™ ·ªü Vi·ªát Nam?",
      options: ["Nguy·ªÖn Hu·ªá", "L√Ω C√¥ng U·∫©n", "L√™ L·ª£i", "Tr·∫ßn H∆∞ng ƒê·∫°o"],
      answer: "L√™ L·ª£i"
    },
    {
      image: "/image/q2.jpg",
      question: "Chi·∫øn th·∫Øng n√†o l√† m·ªëc son ch√≥i l·ªçi trong kh√°ng chi·∫øn ch·ªëng Ph√°p, nƒÉm 1954?",
      options: ["ƒêi·ªán Bi√™n Ph·ªß", "Chi·∫øn khu Vi·ªát B·∫Øc", "Chi·∫øn d·ªãch Bi√™n gi·ªõi", "Chi·∫øn d·ªãch H·ªì Ch√≠ Minh"],
      answer: "ƒêi·ªán Bi√™n Ph·ªß"
    },
    {
      image: "/image/q3.jpg",
      question: "Ai l√† v·ªã t∆∞·ªõng huy·ªÅn tho·∫°i c·ªßa Vi·ªát Nam trong kh√°ng chi·∫øn ch·ªëng M·ªπ?",
      options: ["L√™ Du·∫©n", "V√µ Nguy√™n Gi√°p", "Nguy·ªÖn VƒÉn Linh", "Tr∆∞·ªùng Chinh"],
      answer: "V√µ Nguy√™n Gi√°p"
    },
    {
      image: "/image/q4.jpg",
      question: "Chi·∫øn d·ªãch n√†o ƒë√£ gi·∫£i ph√≥ng ho√†n to√†n mi·ªÅn Nam, th·ªëng nh·∫•t ƒë·∫•t n∆∞·ªõc?",
      options: ["Chi·∫øn d·ªãch T√¢y Nguy√™n", "Chi·∫øn d·ªãch Hu·∫ø - ƒê√† N·∫µng", "Chi·∫øn d·ªãch H·ªì Ch√≠ Minh", "Chi·∫øn d·ªãch ƒê∆∞·ªùng 9"],
      answer: "Chi·∫øn d·ªãch H·ªì Ch√≠ Minh"
    },
    {
      image: "/image/q5.jpg",
      question: "NƒÉm n√†o qu√¢n Nh·∫≠t ƒë·∫£o ch√≠nh Ph√°p ·ªü ƒê√¥ng D∆∞∆°ng?",
      options: ["1945", "1941", "1930", "1943"],
      answer: "1945"
    },
    {
      image: "/image/q6.jpg",
      question: "S·ª± ki·ªán n√†o ƒë√°nh d·∫•u vi·ªác Nh·∫≠t ƒë·∫ßu h√†ng qu√¢n ƒê·ªìng minh trong Th·∫ø chi·∫øn II?",
      options: ["Hi·ªáp ƒë·ªãnh Gi∆°-ne-v∆°", "Ng√†y 2/9/1945", "Ng√†y 15/8/1945", "Chi·∫øn th·∫Øng Stalingrad"],
      answer: "Ng√†y 15/8/1945"
    },
    {
      image: "/image/q7.jpg",
      question: "Ai l√† ng∆∞·ªùi ƒë√£ vi·∫øt Tuy√™n ng√¥n ƒê·ªôc l·∫≠p n∆∞·ªõc Vi·ªát Nam D√¢n ch·ªß C·ªông h√≤a?",
      options: ["Tr∆∞·ªùng Chinh", "H·ªì Ch√≠ Minh", "Ph·∫°m VƒÉn ƒê·ªìng", "L√™ Du·∫©n"],
      answer: "H·ªì Ch√≠ Minh"
    },
    {
      image: "/image/q8.jpg",
      question: "Cu·ªôc chi·∫øn tranh bi√™n gi·ªõi ph√≠a B·∫Øc ch·ªëng Trung Qu·ªëc x·∫£y ra v√†o nƒÉm n√†o?",
      options: ["1979", "1984", "1975", "1980"],
      answer: "1979"
    },
    {
      image: "/image/q9.jpg",
      question: "Chi·∫øn th·∫Øng n√†o m·ªü ƒë·∫ßu cho cu·ªôc kh√°ng chi·∫øn ch·ªëng Ph√°p?",
      options: ["Chi·∫øn th·∫Øng C·∫ßu Gi·∫•y", "Chi·∫øn th·∫Øng Tuy√™n Quang", "Chi·∫øn th·∫Øng Vi·ªát B·∫Øc", "Chi·∫øn th·∫Øng Ph·ªß Th√¥ng"],
      answer: "Chi·∫øn th·∫Øng Vi·ªát B·∫Øc"
    },
    {
      image: "/image/q10.jpg",
      question: "Ai l√† Ch·ªß t·ªãch n∆∞·ªõc ƒë·∫ßu ti√™n c·ªßa n∆∞·ªõc Vi·ªát Nam D√¢n ch·ªß C·ªông h√≤a?",
      options: ["T√¥n ƒê·ª©c Th·∫Øng", "H·ªì Ch√≠ Minh", "Tr∆∞·ªùng Chinh", "Ph·∫°m VƒÉn ƒê·ªìng"],
      answer: "H·ªì Ch√≠ Minh"
    }
  ]; 

const QuizStart = () => {
  const [current, setCurrent] = useState(0);
  const [selected, setSelected] = useState(null);
  const [timeLeft, setTimeLeft] = useState(10);
  const [showAnswer, setShowAnswer] = useState(false);
  const [score, setScore] = useState(0);
  const [isFinished, setIsFinished] = useState(false);
  const [timerRef, setTimerRef] = useState(null);

  const currentQ = questions[current] || {
    question: '',
    options: [],
    image: '',
    answer: ''
  };

  useEffect(() => {
    if (isFinished) return;

    setShowAnswer(false);
    setSelected(null);
    setTimeLeft(10);

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          setShowAnswer(true);

          if (selected === currentQ.answer) {
            setScore((prev) => prev + 1);
          }

          setTimeout(() => {
            if (current + 1 < questions.length) {
              setCurrent((prev) => prev + 1);
            } else {
              setIsFinished(true);
            }
          }, 3000);

          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    setTimerRef(timer);
    return () => clearInterval(timer);
  }, [current]);

  useEffect(() => {
    if (isFinished) {
      const now = new Date();
      const entry = {
        datetime: now.toLocaleString("vi-VN"),
        total: questions.length,
        correct: score,
        score: score * 10,
        rank: score === 10 ? "Top 1" : "Top 10",
        title: score === 10 ? "Tr·∫°ng Nguy√™n" : "B·∫£ng Nh√£n"
      };

      const old = JSON.parse(localStorage.getItem("quizHistory") || "[]");
      localStorage.setItem("quizHistory", JSON.stringify([...old, entry]));
    }
  }, [isFinished]);

  const handleSelect = (option) => {
    if (!showAnswer) setSelected(option);
  };

  const handleNext = () => {
    if (!showAnswer) {
      clearInterval(timerRef);
      setTimeLeft(0);
      setShowAnswer(true);

      if (selected === currentQ.answer) {
        setScore((prev) => prev + 1);
      }

      setTimeout(() => {
        if (current + 1 < questions.length) {
          setCurrent((prev) => prev + 1);
        } else {
          setIsFinished(true);
        }
      }, 1000);
    }
  };

  return (
    <QuizWrapper>
      {isFinished ? (
        <>
          <h1 style={{ fontSize: '32px', color: '#a40000', marginBottom: '20px' }}>
            üéâ B·∫°n ƒë√£ ho√†n th√†nh b√†i thi Tr·∫°ng Nguy√™n!
          </h1>
          <h2 style={{ fontSize: '24px', color: '#333', marginBottom: '40px' }}>
            ƒêi·ªÉm s·ªë c·ªßa b·∫°n: {score} / {questions.length}
          </h2>

          <div style={{ display: 'flex', gap: '20px' }}>
            <button
              style={{
                padding: '12px 24px',
                fontSize: '16px',
                borderRadius: '10px',
                backgroundColor: '#008CBA',
                color: 'white',
                border: 'none',
                cursor: 'pointer',
              }}
              onClick={() => {
                setCurrent(0);
                setScore(0);
                setIsFinished(false);
              }}
            >
              üîÅ Th·ª≠ t√†i l·∫ßn n·ªØa
            </button>

            <button
              style={{
                padding: '12px 24px',
                fontSize: '16px',
                borderRadius: '10px',
                backgroundColor: '#f44336',
                color: 'white',
                border: 'none',
                cursor: 'pointer',
              }}
              onClick={() => {
                window.location.href = '/quiz';
              }}
            >
              ‚¨ÖÔ∏è Quay l·∫°i
            </button>
          </div>
        </>
      ) : (
        <>
          <QuestionRow>
            <QuestionBlock>
              <QuestionText>{currentQ.question}</QuestionText>
              <OptionList>
                {currentQ.options.map((option) => {
                  const isCorrect = showAnswer && option === currentQ.answer;
                  const isWrong = showAnswer && selected === option && option !== currentQ.answer;
                  return (
                    <Option
                      key={option}
                      selected={selected === option}
                      correct={isWrong ? false : undefined}
                      isAnswer={isCorrect}
                      disabled={showAnswer}
                      onClick={() => handleSelect(option)}
                    >
                      {option}
                    </Option>
                  );
                })}
              </OptionList>
            </QuestionBlock>

            <QuestionImage src={currentQ.image} alt="question" />
          </QuestionRow>

          <ProgressBarWrapper>
            <ProgressFill key={current} />
          </ProgressBarWrapper>

          <NextButton onClick={handleNext}>
            Next Question ‚Üí
          </NextButton>
        </>
      )}
    </QuizWrapper>
  );
};

export default QuizStart;
